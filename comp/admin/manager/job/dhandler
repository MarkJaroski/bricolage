<%perl>;
# Output the header.
$m->comp('/widgets/wrappers/header.mc',
          title => $title,
          context => $context);

# Output the search widget.
my ($groupList, $constrain);
my $behavior = $def->{behavior};

$def->{list_fields}->[3] = 'sched_time';
$def->{title} = 'Pending %n';
my $jtype = $ARGS{'search|jtype'};
unless (defined $jtype) {
    my $prev_state = get_state_data('search', 'job');
    $jtype = $prev_state->{prev_type}
      if defined $prev_state and exists $prev_state->{prev_type};
}
my $username  = $ARGS{'search|username'};
unless (defined $username) {
    my $prev_state = get_state_data('search', 'job');
    $username = $prev_state->{username}
      if defined $prev_state and exists $prev_state->{username};
}
my $uri = $ARGS{'search|uri'};
unless (defined $uri) {
    my $prev_state = get_state_data('search', 'job');
    $uri = $prev_state->{uri}
      if defined $prev_state and exists $prev_state->{uri};
}

# Set the constraint.
$constrain = { %{ $def->{constrain} } };
$constrain->{name} = "%" . $ARGS{"search|value"} . "%"
        if exists $ARGS{"search|value"};
my $days = $ARGS{"search|rc_days"} || 1;
if ($jtype) {
    my $prev_state = get_state_data('listManager', 'job');
    $prev_state->{sort_by} = 'sched_time';
    $prev_state->{sort_order} = 'ascending';
    # Constraint from dropdown
    my $end_of_day_format = '%G-%m-%dT23:59:59';

    if ($jtype eq 'expire') {
        $constrain->{type} = 1;
    } elsif ($jtype eq 'failed') {
        $constrain->{failed} = 1;
    } elsif ($jtype eq 'today') {
        my $ltime = local_date(undef, $end_of_day_format, 1);
        $constrain->{sched_time} = [undef, $ltime];
    } elsif ($jtype eq 'future') {
        my $ltime = local_date(undef, $end_of_day_format, 1);
        $constrain->{sched_time} = [$ltime, undef];
    } elsif ($jtype eq 'completed') {
        my $now = DateTime->now(time_zone => Bric::Util::Pref->lookup_val('Time Zone'));
        my $dur = DateTime::Duration->new(days => $days);
        my $then = $now - $dur;
        my $iso_8601 = '%G-%m-%dT%H:%M:%SZ';
        $constrain->{comp_time} 
                = [$then->strftime($iso_8601), $now->strftime($iso_8601)];
        $constrain->{name} = 'Publish%';
        $constrain->{name} .= $ARGS{"search|value"} . "%"
                if exists $ARGS{"search|value"};
        $def->{list_fields}->[3] = 'comp_time';
        $def->{title} = 'Recent publish %n';
        $prev_state->{sort_by} = 'comp_time';
        $prev_state->{sort_order} = 'descending';
    } elsif ($jtype eq 'mine') {
        $constrain->{user_id} = get_user_id();
    }
    set_state_data('listManager', job => $prev_state);

    $prev_state = get_state_data('search', 'job');
    $prev_state->{prev_type} = $jtype;
    set_state_data('search', job => $prev_state);

    $behavior = 'narrow';
} else {
    # It's the first time accessing.
    $jtype = 'all';
}

$constrain->{username} = "%" . $username . "%"
        if $username;

$constrain->{uri} = "%" . $uri . "%"
        if $uri;

my $state = get_state_data('search', 'job') || {};
my $pkg   = get_package_name('job');

</%perl>
<form action="<% $r->uri %>" method="post" name="searchbox" id="searchbox">
<& '/widgets/wrappers/table_top.mc',
              caption => $lang->maketext('Search'),
              search  => 1,
&>
<div class="row">
% my $name_label = $lang->maketext('By Asset Name:');
% $m->out(qq{<div class="label">$name_label</div>});
    <div class="input">
    <& '/widgets/profile/text.mc',
        name        => 'search|value',
        value       => $ARGS{"search|value"} || '',
        size        => 32,
        maxlength   => 100,
        useTable    => 0
    &>
%   # This hidden field is required to make the form submit when the user hits
%   # the "enter" key.
    <& '/widgets/profile/hidden.mc',
        name    => 'search|substr_cb',
        value   => 'Search',
    &>
    <& '/widgets/profile/button.mc',
        disp    => $lang->maketext('Search'),
        widget  => 'search',
        cb      => 'substr_cb',
        button  => 'search_red',
        useTable => 0,
    &>
    </div>
</div>
<div class="row">
% my $uri_label = $lang->maketext('By Asset URI:');
% $m->out(qq{<div class="label">$uri_label</div>});
    <div class="input">
    <& '/widgets/profile/text.mc',
        name        => 'search|uri',
        value       => $uri,
        size        => 32,
        maxlength   => 100,
        useTable    => 0
    &>
    </div>
</div>
<div class="row">
% $m->out(qq{<div class="label">By Scheduler:</div>});
    <div class="input">
    <& '/widgets/profile/text.mc',
        name        => 'search|username',
        value       => $username,
        size        => 32,
        maxlength   => 100,
        useTable    => 0
    &>
    </div>
</div>
<%perl>
my %job_sel = (
    'all'       => $lang->maketext("All pending jobs"),
    'today'     => $lang->maketext("Today's jobs"),
    'future'    => $lang->maketext("Future jobs"),
    'expire'    => $lang->maketext("Expire jobs"),
    'failed'    => $lang->maketext("Failed jobs"),
    'completed' => $lang->maketext("Completed jobs"),
    'mine'      => $lang->maketext("My jobs"),
);
$def->{title} = $job_sel{$jtype};
</%perl>
<& '/widgets/profile/select.mc',
    disp => $lang->maketext('Filter'),
    options => \%job_sel,
    indent  => 140,
    width   => 500,
    name    => 'search|jtype',
    id      => 'search|jtype',
    value   => $jtype,
    js      => qq{onChange="forms['searchbox'].submit(); return false;"}
&>
<%perl>
    my $age_sel = [ 1, 3, 7, 14, 30, 90, 180, 365, 730 ];
</%perl>
%if ( $jtype eq 'completed' ) {
<& '/widgets/profile/select.mc',
    disp => $lang->maketext('Max Age (in Days)'),
    options => $age_sel,
    indent  => 140,
    width   => 500,
    name    => 'search|rc_days',
    id      => 'search|rc_days',
    value   => $days,
    js      => qq{onChange="forms['searchbox'].submit(); return false;"}
&>
%}
<& /widgets/wrappers/table_bottom.mc &>
</form>
<%perl>

# Output a form tag if necessary.
if (defined $def->{select}) {
    $m->out(qq{<form method="post" action="${ \$r->uri }" name="manager"}
          . qq{onsubmit="return confirmDeletions()">});
}

$m->comp('/widgets/wrappers/table_top.mc',
          caption => $def->{title} || 'Existing %n',
          object  => 'job',
);

# Output the list of found objects.
$m->comp('/widgets/listManager/listManager.mc',
    show_count => 1,
    behavior => $behavior,
    object => 'job',
    profile => $prof_sub,
    fields => @$sites > 1 ? $def->{list_fields} : [ grep $_ ne 'site', @{ $def->{list_fields} } ],
    addition =>  undef,
    select => $def->{select},
    constrain => $constrain || $def->{constrain},
    field_titles => $def->{field_titles},
    field_values => $def->{field_values},
    alter => $def->{alter},
    exclude => $def->{exclude} || $excl_sub,
    sortBy => $def->{sort_by} );

$m->comp('/widgets/wrappers/table_bottom.mc');

# Output the form closing tag if necessary.
if (defined $def->{select} && $can_del) {
    $m->comp("/widgets/buttons/submit.mc",
              disp      => "$sel_label Checked",
              name      => 'action',
              button    => 'cancel_checked_red',
              useTable  => 0
            );
    $m->out(qq{\n</form>\n});
}

# Output the footer.
$m->comp('/widgets/wrappers/footer.mc', param => \%ARGS);

# Undef $can_del and $users for the next request.
($can_del, $users, $ets) = ();
</%perl>
<%init>;

# Set the title.
my $title = get_disp_name('job') . " Manager";
my $context = "Admin | Manager | " . get_class_info('job')->get_plural_name;

# Set the selection label and widget.
$sel_label = 'Cancel';
$sel_widg = 'job|cancel_cb';

$fmt = get_pref('List Name Format');

my $prefix = '';

# We'll use this coderef to display the proper profile link labels.
my $prof_sub = sub {
    # Get the object ID.
    my $id = $_[0]->get_id;
    # Assume user can edit the profile.
    my $edit = ['Edit', "$prefix/admin/profile/job/$id", ''];
    # Change the label to "Edit" if they can edit it.
    $edit->[0] = 'View' unless chk_authz($_[0], EDIT, 1);
    return [ $edit, [ 'Log', "/admin/events/job/$id", ''] ];
};

# And we'll use this coderef to determine whether to include an Add link
# or not.
my $add_sub = sub {
    return chk_authz($_[0], CREATE, 1) ?
        ['Add', "$prefix/admin/profile/job/"] : undef;
};

my $ct_add_sub = sub {
    return chk_authz($_[0], CREATE, 1) ?
        ['Add', "$prefix/admin/profile/job/", 'Contributor Group'] : undef;
};

# Check where we were last.
my $changed = get_state_name('admin_mgr') || '';
set_state_name('admin_mgr', 'job');
$changed = $changed eq 'job' ? 0 : 1;
</%init>
<%once>;
# We'll use this coderef below.
my $yes_no = sub { $lang->maketext( $_[0] ? 'Yes' : 'No'  ) };
my $site_name = sub { my $s=Bric::Biz::Site->lookup({id => $_[0]});
                      return $s->get_name
                  };
my $sites = $c->get('__SITES__') || Bric::Biz::Site->list({ active => 1 });

# And we'll use this coderef to determine whether the user can delete objects.
my ($can_del, $users, $sel_label, $sel_widg, $ets);
my $sel_sub = sub {
    if (chk_authz($_[0], EDIT, 1)) {
    # User can delete.
    $can_del = 1;
    return [$sel_label, $sel_widg];
    }
    return undef;
};

# This coderef will be used for category delete checkboxes.
my $cat_sel_sub = sub {
    # Don't create a checkbox for the root category.
    &$sel_sub if ! $_[0]->is_root_category;
};

# We'll use this coderef to make sure the user can at least READ the object.
my $excl_sub = sub { ! chk_authz($_[0], READ, 1) };

# We'll use this for displaying a select list of groups.
my %grp_sel = Bric::Util::Grp->href_grp_class_keys;
$grp_sel{''} = ' All Groups'; # XXX The space makes it first in the list.
# XXX Make sure contrib_grp is properly re-labled.
$grp_sel{contrib_type} = 'Contributor Groups';
my $fmt;

# We'll use this coderef for displaying users.
my $usr_sub = sub {
    return unless $_[1] eq 'user_id';
    my $uid = $_[0]->get_user_id;
    my $u = $users->{$uid} ||= Bric::Biz::Person::User->lookup({ id => $uid });
    $u->format_name($fmt);
};

# And this one for owners.
my $owner_sub = sub {
    return unless $_[1] eq 'owner_id';
    my $uid = $_[0]->get_owner_id;
    my $u = $users->{$uid} ||= Bric::Biz::Person::User->lookup({ id => $uid });
    $u->format_name($fmt);
};

# For marking failed jobs as failed
my $job_name_sub = sub {
    my ($name, $job) = @_;
    if ($job->has_failed) {
        return qq{<span class="label required"><image src="/media/images/bang_red.gif" /> $name</span>};
    } else {
        return $name;
    }
};

# Deals with the job type and class
my $job_type_sub = sub {
    my ($type, $job) = @_;
    if (ref $job eq 'Bric::Util::Job::Dist') {
        return $type ? 'Expire' : 'Deliver';
    } else {
        return 'Publish';
    }
};

# Define the look and feel
my $def = {
    list_fields  => [qw(name type user_id sched_time)],
    behavior     => 'narrow',
    title        => '%n',
    constrain    => { comp_time => undef },
    field_values => $usr_sub,
    select       => $sel_sub,
    sort_by      => 'sched_time',
    alter => {
        type => $job_type_sub,
        name => $job_name_sub,
    },
};

</%once>
<%doc>
###############################################################################

=head1 NAME

/admin/manager/job/dhandler - Admin tool for the job queue, and its history

=head1 DATE

$LastChangedDate$

=head1 SYNOPSIS

<a href="/admin/manager/job">Job Manager</a>

=head1 DESCRIPTION

This is the specialized admin manager for handling the administration of
job objects. 

</%doc>

